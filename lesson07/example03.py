# Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

class Cell:
    cell_number_1: int = None
    cell_number_2: int = None
    def __init__(self, cell_number_1, cell_number_2):
        self.cell_number_1 = cell_number_1
        self.cell_number_2 = cell_number_2

    # Сложение. Объединение двух клеток.
    # При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
    def __add__(self):
        return self.cell_number_1 + self.cell_number_2

    # Вычитание. Участвуют две клетки.
    # Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля,
    # иначе выводить соответствующее сообщение.
    def __sub__(self):
        if self.cell_number_1 > self.cell_number_2:
            return self.cell_number_1 - self.cell_number_2
        else:
            return "First cell less than second cell"

    # Умножение. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
    def __mul__(self):
        return self.cell_number_1 * self.cell_number_2

    # Деление. Создается общая клетка из двух.
    # Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
    def __truediv__(self):
        if self.cell_number_2 != 0:
            return int(self.cell_number_1 / self.cell_number_2)
        else:
            return "Second cell is null"

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    # Данный метод позволяет организовать ячейки по рядам.
    # Метод должен возвращать строку вида *****\n*****\n*****...,
    # где количество ячеек между \n равно переданному аргументу.
    # Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    # Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: *****\n*****\n**.
    # Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: *****\n*****\n*****.
    def make_order(self, cell_num: int):
        string = ''
        i = self.cell_number_1
        while i > 0:
            if i > cell_num:
                for _ in range(0, cell_num):
                    string += '*'
            else:
                for _ in range(0, i):
                    string += '*'
            string += '\n'
            i -= cell_num
        return string


cells = Cell(12, 5)
print(cells.__add__())
print(cells.__sub__())
print(cells.__mul__())
print(cells.__truediv__())
print(cells.make_order(5))
